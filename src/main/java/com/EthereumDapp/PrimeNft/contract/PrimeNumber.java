package com.EthereumDapp.PrimeNft.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class PrimeNumber extends Contract {
    public static final String BINARY = "0x60806040523480156200001157600080fd5b506040805190810160405280600b81526020017f5072696d654e756d6265720000000000000000000000000000000000000000008152506040805190810160405280600581526020017f5052494d450000000000000000000000000000000000000000000000000000008152508181620000bd6301ffc9a77c010000000000000000000000000000000000000000000000000000000002620001b0640100000000026401000000009004565b620000fa6380ac58cd7c010000000000000000000000000000000000000000000000000000000002620001b0640100000000026401000000009004565b6200013763780e9d637c010000000000000000000000000000000000000000000000000000000002620001b0640100000000026401000000009004565b81600990805190602001906200014f929190620002a6565b5080600a908051906020019062000168929190620002a6565b50620001a6635b5e139f7c010000000000000000000000000000000000000000000000000000000002620001b0640100000000026401000000009004565b50505050620003ae565b63ffffffff7c010000000000000000000000000000000000000000000000000000000002817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515156200023a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000231906200038c565b60405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002e957805160ff19168380011785556200031a565b828001600101855582156200031a579182015b8281111562000319578251825591602001919060010190620002fc565b5b5090506200032991906200032d565b5090565b6200035291905b808211156200034e57600081600090555060010162000334565b5090565b90565b6000601c82527f4552433136353a20696e76616c696420696e74657266616365206964000000006020830152604082019050919050565b60006020820190508181036000830152620003a78162000355565b9050919050565b612fc880620003be6000396000f3fe608060405260043610610112576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a714610117578063025e7c271461015457806306fdde0314610191578063081812fc146101bc578063095ea7b3146101f957806318160ddd1461022257806323b872dd1461024d5780632f745c591461027657806342842e0e146102b35780634f6ccce7146102dc5780636352211e1461031957806370a082311461035657806386c3b5da1461039357806395d89b41146103be578063a22cb465146103e9578063ac41963f14610412578063b88d4fde1461044f578063c87b56dd14610478578063d85d3d27146104b5578063e985e9c5146104de575b600080fd5b34801561012357600080fd5b5061013e6004803603610139919081019061225d565b61051b565b60405161014b9190612ae2565b60405180910390f35b34801561016057600080fd5b5061017b600480360361017691908101906122f0565b610582565b6040516101889190612a59565b60405180910390f35b34801561019d57600080fd5b506101a66105c0565b6040516101b39190612b1f565b60405180910390f35b3480156101c857600080fd5b506101e360048036036101de91908101906122f0565b610662565b6040516101f09190612a59565b60405180910390f35b34801561020557600080fd5b50610220600480360361021b9190810190612221565b6106e9565b005b34801561022e57600080fd5b5061023761089a565b6040516102449190612d83565b60405180910390f35b34801561025957600080fd5b50610274600480360361026f919081019061211b565b6108a7565b005b34801561028257600080fd5b5061029d60048036036102989190810190612221565b610902565b6040516102aa9190612d83565b60405180910390f35b3480156102bf57600080fd5b506102da60048036036102d5919081019061211b565b6109af565b005b3480156102e857600080fd5b5061030360048036036102fe91908101906122f0565b6109d0565b6040516103109190612d83565b60405180910390f35b34801561032557600080fd5b50610340600480360361033b91908101906122f0565b610a3e565b60405161034d9190612a59565b60405180910390f35b34801561036257600080fd5b5061037d600480360361037891908101906120b6565b610af2565b60405161038a9190612d83565b60405180910390f35b34801561039f57600080fd5b506103a8610bb3565b6040516103b59190612ac0565b60405180910390f35b3480156103ca57600080fd5b506103d3610c9c565b6040516103e09190612b1f565b60405180910390f35b3480156103f557600080fd5b50610410600480360361040b91908101906121e5565b610d3e565b005b34801561041e57600080fd5b50610439600480360361043491908101906122f0565b610eac565b6040516104469190612afd565b60405180910390f35b34801561045b57600080fd5b506104766004803603610471919081019061216a565b610f67565b005b34801561048457600080fd5b5061049f600480360361049a91908101906122f0565b610fc5565b6040516104ac9190612b1f565b60405180910390f35b3480156104c157600080fd5b506104dc60048036036104d791908101906122af565b6110c4565b005b3480156104ea57600080fd5b50610505600480360361050091908101906120df565b611231565b6040516105129190612ae2565b60405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600d8181548110151561059157fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106585780601f1061062d57610100808354040283529160200191610658565b820191906000526020600020905b81548152906001019060200180831161063b57829003601f168201915b5050505050905090565b600061066d826112c5565b15156106ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a590612cc3565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106f482610a3e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e90612d23565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107a757506107a68133611231565b5b15156107e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107df90612c43565b60405180910390fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b6000600780549050905090565b6108b13382611337565b15156108f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e990612d43565b60405180910390fd5b6108fd838383611417565b505050565b600061090d83610af2565b82101515610950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094790612b63565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561099c57fe5b9060005260206000200154905092915050565b6109cb8383836020604051908101604052806000815250610f67565b505050565b60006109da61089a565b82101515610a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1490612d63565b60405180910390fd5b600782815481101515610a2c57fe5b90600052602060002001549050919050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae090612c83565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90612c63565b60405180910390fd5b610bac600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061143b565b9050919050565b6060600c805480602002602001604051908101604052809291908181526020016000905b82821015610c93578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c7f5780601f10610c5457610100808354040283529160200191610c7f565b820191906000526020600020905b815481529060010190602001808311610c6257829003601f168201915b505050505081526020019060010190610bd7565b50505050905090565b6060600a8054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d345780601f10610d0957610100808354040283529160200191610d34565b820191906000526020600020905b815481529060010190602001808311610d1757829003601f168201915b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515610daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da690612be3565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ea09190612ae2565b60405180910390a35050565b600c81815481101515610ebb57fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f5f5780601f10610f3457610100808354040283529160200191610f5f565b820191906000526020600020905b815481529060010190602001808311610f4257829003601f168201915b505050505081565b610f728484846108a7565b610f7e84848484611449565b1515610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690612b83565b60405180910390fd5b50505050565b6060610fd0826112c5565b1515611011576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100890612d03565b60405180910390fd5b600b60008381526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110b85780601f1061108d576101008083540402835291602001916110b8565b820191906000526020600020905b81548152906001019060200180831161109b57829003601f168201915b50505050509050919050565b6110cd8161159a565b15156110d857600080fd5b600e816040518082805190602001908083835b60208310151561111057805182526020820191506020810190506020830392506110eb565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1615151561115d57600080fd5b6000600c82908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061119c929190611ec1565b5090506111a9338261169c565b6001600e836040518082805190602001908083835b6020831015156111e357805182526020820191506020810190506020830392506111be565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000611342826112c5565b1515611383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137a90612c23565b60405180910390fd5b600061138e83610a3e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113fd57508373ffffffffffffffffffffffffffffffffffffffff166113e584610662565b73ffffffffffffffffffffffffffffffffffffffff16145b8061140e575061140d8185611231565b5b91505092915050565b6114228383836116bd565b61142c83826118f0565b6114368282611a94565b505050565b600081600001549050919050565b600061146a8473ffffffffffffffffffffffffffffffffffffffff16611b5b565b15156114795760019050611592565b60008473ffffffffffffffffffffffffffffffffffffffff1663150b7a02338887876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114d69493929190612a74565b602060405180830381600087803b1580156114f057600080fd5b505af1158015611504573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115289190810190612286565b905063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150505b949350505050565b60008060009050600073__Integers______________________________6342346c5e856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016115f69190612b41565b60206040518083038186803b15801561160e57600080fd5b505af4158015611622573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116469190810190612319565b9050600291505b60028181151561165957fe5b048211151561168e576000828281151561166f57fe5b06141561168157600092505050611697565b818060010192505061164d565b60018111925050505b919050565b6116a68282611b6e565b6116b08282611a94565b6116b981611d24565b5050565b8273ffffffffffffffffffffffffffffffffffffffff166116dd82610a3e565b73ffffffffffffffffffffffffffffffffffffffff16141515611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c90612ce3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156117a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179e90612bc3565b60405180910390fd5b6117b081611d70565b6117f7600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611e30565b61183e600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611e53565b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006119486001600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050611e6990919063ffffffff16565b90506000600660008481526020019081526020016000205490508181141515611a3b576000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156119b957fe5b9060005260206000200154905080600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611a1357fe5b9060005260206000200181905550816006600083815260200190815260200160002081905550505b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003611a8d9190611f41565b5050505050565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506006600083815260200190815260200160002081905550600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611be0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd790612ca3565b60405180910390fd5b611be9816112c5565b151515611c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2290612ba3565b60405180910390fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611cc4600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611e53565b808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6007805490506008600083815260200190815260200160002081905550600781908060018154018082558091505090600182039060005260206000200160009091929091909150555050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e2d5760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b611e4860018260000154611e6990919063ffffffff16565b816000018190555050565b6001816000016000828254019250508190555050565b6000828211151515611eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea790612c03565b60405180910390fd5b600082840390508091505092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611f0257805160ff1916838001178555611f30565b82800160010185558215611f30579182015b82811115611f2f578251825591602001919060010190611f14565b5b509050611f3d9190611f6d565b5090565b815481835581811115611f6857818360005260206000209182019101611f679190611f6d565b5b505050565b611f8f91905b80821115611f8b576000816000905550600101611f73565b5090565b90565b6000611f9e8235612eb1565b905092915050565b6000611fb28235612ec3565b905092915050565b6000611fc68235612ecf565b905092915050565b6000611fda8251612ecf565b905092915050565b600082601f8301121515611ff557600080fd5b813561200861200382612dcb565b612d9e565b9150808252602083016020830185838301111561202457600080fd5b61202f838284612f3b565b50505092915050565b600082601f830112151561204b57600080fd5b813561205e61205982612df7565b612d9e565b9150808252602083016020830185838301111561207a57600080fd5b612085838284612f3b565b50505092915050565b600061209a8235612efb565b905092915050565b60006120ae8251612efb565b905092915050565b6000602082840312156120c857600080fd5b60006120d684828501611f92565b91505092915050565b600080604083850312156120f257600080fd5b600061210085828601611f92565b925050602061211185828601611f92565b9150509250929050565b60008060006060848603121561213057600080fd5b600061213e86828701611f92565b935050602061214f86828701611f92565b92505060406121608682870161208e565b9150509250925092565b6000806000806080858703121561218057600080fd5b600061218e87828801611f92565b945050602061219f87828801611f92565b93505060406121b08782880161208e565b925050606085013567ffffffffffffffff8111156121cd57600080fd5b6121d987828801611fe2565b91505092959194509250565b600080604083850312156121f857600080fd5b600061220685828601611f92565b925050602061221785828601611fa6565b9150509250929050565b6000806040838503121561223457600080fd5b600061224285828601611f92565b92505060206122538582860161208e565b9150509250929050565b60006020828403121561226f57600080fd5b600061227d84828501611fba565b91505092915050565b60006020828403121561229857600080fd5b60006122a684828501611fce565b91505092915050565b6000602082840312156122c157600080fd5b600082013567ffffffffffffffff8111156122db57600080fd5b6122e784828501612038565b91505092915050565b60006020828403121561230257600080fd5b60006123108482850161208e565b91505092915050565b60006020828403121561232b57600080fd5b6000612339848285016120a2565b91505092915050565b61234b81612f05565b82525050565b61235a81612e69565b82525050565b600061236b82612e30565b8084526020840193508360208202850161238485612e23565b60005b848110156123bd57838303885261239f83835161247f565b92506123aa82612e5c565b9150602088019750600181019050612387565b508196508694505050505092915050565b6123d781612e7b565b82525050565b60006123e882612e3b565b8084526123fc816020860160208601612f4a565b61240581612f7d565b602085010191505092915050565b600061241e82612e51565b808452612432816020860160208601612f4a565b61243b81612f7d565b602085010191505092915050565b600061245482612e51565b808452612468816020860160208601612f4a565b61247181612f7d565b602085010191505092915050565b600061248a82612e46565b80845261249e816020860160208601612f4a565b6124a781612f7d565b602085010191505092915050565b6000602b82527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560208301527f74206f6620626f756e64730000000000000000000000000000000000000000006040830152606082019050919050565b6000603282527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560208301527f63656976657220696d706c656d656e74657200000000000000000000000000006040830152606082019050919050565b6000601c82527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006020830152604082019050919050565b6000602482527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460208301527f72657373000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601982527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006020830152604082019050919050565b6000601e82527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006020830152604082019050919050565b6000602c82527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860208301527f697374656e7420746f6b656e00000000000000000000000000000000000000006040830152606082019050919050565b6000603882527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760208301527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006040830152606082019050919050565b6000602a82527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560208301527f726f2061646472657373000000000000000000000000000000000000000000006040830152606082019050919050565b6000602982527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460208301527f656e7420746f6b656e00000000000000000000000000000000000000000000006040830152606082019050919050565b6000602082527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736020830152604082019050919050565b6000602c82527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860208301527f697374656e7420746f6b656e00000000000000000000000000000000000000006040830152606082019050919050565b6000602982527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960208301527f73206e6f74206f776e00000000000000000000000000000000000000000000006040830152606082019050919050565b6000602f82527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60208301527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006040830152606082019050919050565b6000602182527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560208301527f72000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000603182527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60208301527f776e6572206e6f7220617070726f7665640000000000000000000000000000006040830152606082019050919050565b6000602c82527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60208301527f7574206f6620626f756e647300000000000000000000000000000000000000006040830152606082019050919050565b612a5381612ea7565b82525050565b6000602082019050612a6e6000830184612351565b92915050565b6000608082019050612a896000830187612342565b612a966020830186612351565b612aa36040830185612a4a565b8181036060830152612ab581846123dd565b905095945050505050565b60006020820190508181036000830152612ada8184612360565b905092915050565b6000602082019050612af760008301846123ce565b92915050565b60006020820190508181036000830152612b17818461247f565b905092915050565b60006020820190508181036000830152612b398184612413565b905092915050565b60006020820190508181036000830152612b5b8184612449565b905092915050565b60006020820190508181036000830152612b7c816124b5565b9050919050565b60006020820190508181036000830152612b9c81612512565b9050919050565b60006020820190508181036000830152612bbc8161256f565b9050919050565b60006020820190508181036000830152612bdc816125a6565b9050919050565b60006020820190508181036000830152612bfc81612603565b9050919050565b60006020820190508181036000830152612c1c8161263a565b9050919050565b60006020820190508181036000830152612c3c81612671565b9050919050565b60006020820190508181036000830152612c5c816126ce565b9050919050565b60006020820190508181036000830152612c7c8161272b565b9050919050565b60006020820190508181036000830152612c9c81612788565b9050919050565b60006020820190508181036000830152612cbc816127e5565b9050919050565b60006020820190508181036000830152612cdc8161281c565b9050919050565b60006020820190508181036000830152612cfc81612879565b9050919050565b60006020820190508181036000830152612d1c816128d6565b9050919050565b60006020820190508181036000830152612d3c81612933565b9050919050565b60006020820190508181036000830152612d5c81612990565b9050919050565b60006020820190508181036000830152612d7c816129ed565b9050919050565b6000602082019050612d986000830184612a4a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612dc157600080fd5b8060405250919050565b600067ffffffffffffffff821115612de257600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115612e0e57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000612e7482612e87565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612ebc82612e87565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b6000612f1082612f17565b9050919050565b6000612f2282612f29565b9050919050565b6000612f3482612e87565b9050919050565b82818337600083830152505050565b60005b83811015612f68578082015181840152602081019050612f4d565b83811115612f77576000848401525b50505050565b6000601f19601f830116905091905056fea265627a7a723058207b1bf4afd8466888da3442516ca10f73221aed50ff18d1ddca46d2c25d544c516c6578706572696d656e74616cf50037";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_OWNERS = "owners";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TOKENOFOWNERBYINDEX = "tokenOfOwnerByIndex";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_TOKENBYINDEX = "tokenByIndex";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_PRIMENUMBERSNFT = "primeNumbersNft";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_GETPRIMENUMBERSNFT = "getprimeNumbersNft";

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0xb44c5F1C9D32d19513E8EBBfE994f1f0aD7255E6");
    }

    @Deprecated
    protected PrimeNumber(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PrimeNumber(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PrimeNumber(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PrimeNumber(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owners(BigInteger param0) {
        final Function function = new Function(FUNC_OWNERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> name() {
        final Function function = new Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final Function function = new Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final Function function = new Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tokenOfOwnerByIndex(String owner, BigInteger index) {
        final Function function = new Function(FUNC_TOKENOFOWNERBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tokenByIndex(BigInteger index) {
        final Function function = new Function(FUNC_TOKENBYINDEX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final Function function = new Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final Function function = new Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String to, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> primeNumbersNft(BigInteger param0) {
        final Function function = new Function(FUNC_PRIMENUMBERSNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        final Function function = new Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final Function function = new Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String _prime) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_prime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getprimeNumbersNft() {
        final Function function = new Function(FUNC_GETPRIMENUMBERSNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static PrimeNumber load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PrimeNumber(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PrimeNumber load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PrimeNumber(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PrimeNumber load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PrimeNumber(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PrimeNumber load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PrimeNumber(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PrimeNumber> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PrimeNumber.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<PrimeNumber> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PrimeNumber.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PrimeNumber> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PrimeNumber.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PrimeNumber> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PrimeNumber.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }
}
